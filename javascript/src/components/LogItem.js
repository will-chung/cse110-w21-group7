import{IndexedDBWrapper}from"../indexedDB/IndexedDBWrapper.js";import{Router,ROUTES}from"../utils/Router.js";import{DateConverter}from"../utils/DateConverter.js";class LogItem extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this._itemEntry={},this._itemEntry.logType="note",this._itemEntry.description="",this._page="daily",this.render()}render(){this.shadowRoot.innerHTML=`<style>\n                                    span {\n                                      overflow-wrap:anywhere;\n                                    }\n\n                                    .icon {\n                                        background-size: contain;\n                                        display:inline-block;\n                                        width:1em;\n                                        height:1em;\n                                        margin-right: 10px;\n                                    }\n                                    .icon:hover {\n                                      cursor: pointer;\n                                    }\n                                    .trash-button-icon {\n                                        background: url(./images/log-item_icons/trash-solid.svg) no-repeat center center;\n                                    }\n                                    .task-unfinished-icon {\n                                        background: url(./images/log-item_icons/times-solid.svg) no-repeat center center;\n                                    }\n                                    .task-finished-icon {\n                                        background: url(./images/log-item_icons/check-solid.svg) no-repeat center center;\n                                    }\n                                    .note-icon {\n                                        background: url(./images/log-item_icons/note-solid.svg) no-repeat center center;\n                                    }\n                                    .event-icon {\n                                        background: url(./images/log-item_icons/event-solid.svg) no-repeat center center;\n                                    }\n                                    .reflection-icon {\n                                        background: url(./images/log-item_icons/reflection-solid.svg) no-repeat center center;\n                                    }\n                                    button {\n                                        background-color: rgba(0,0,0,0);\n                                        border:0;\n                                        padding:0;\n                                        font-size: inherit;\n                                        visibility: hidden;\n                                        margin-left: 100px;\n                                    }\n                                    button:hover {\n                                      cursor: pointer;\n                                    }\n                                    #single-entry{\n                                      margin:0;\n                                    }\n                                    #tasks {\n                                      width: 90%;\n                                    }\n                                    </style>\n                                    <span id="single-entry">\n                                        <i class="icon ${this.getFASymbolClass()}"></i>\n                                        <b>${this.getFormattedTime()}</b>\n                                        <span id="tasks">${this._itemEntry.description}</span>\n                                        <button type="button">\n                                        <span class="icon trash-button-icon"></span>\n                                        </button>\n                                    </span>`;const e=this._itemEntry.editable,t=this;e?(t.setHoverListeners(),this.shadowRoot.querySelector("button").addEventListener("click",(e=>{new IndexedDBWrapper("experimentalDB",1).transaction((e=>{e.target.result.transaction(["currentLogStore"],"readwrite").objectStore("currentLogStore").openCursor().onsuccess=function(e){const n=(()=>{let e;switch(t._itemEntry.logType){case"task":e="tasks";break;case"note":e="notes";break;case"event":e="events";break;case"reflection":e="reflection"}return e})(),i=e.target.result;if(i){const e=new Router,r=e.url.searchParams;let s,o,a,c,l;switch(e.url.pathname){case ROUTES.daily:l=Number(r.get("timestamp")),s=new DateConverter(l),c=i.value.$defs["daily-logs"].find((e=>s.equals(Number(e.properties.date.time)))),c.properties[n]=c.properties[n].filter((e=>!(e.description===t._itemEntry.description)));break;case ROUTES.weekly:break;case ROUTES["collection-edit"]:o=r.get("name").replace(/\+/g," "),a=i.value.properties.collections.find((e=>e.name===o)),a.tasks=a.tasks.filter((e=>!(e.description===t._itemEntry.description)))}i.update(i.value)}}})),this.parentElement.remove()}))):this.shadowRoot.querySelector("button").style.display="none","task"===this._itemEntry.logType&&t.shadowRoot.querySelector("i").addEventListener("click",(e=>{this._itemEntry.finished=!this._itemEntry.finished;new IndexedDBWrapper("experimentalDB",1).transaction((e=>{e.target.result.transaction(["currentLogStore"],"readwrite").objectStore("currentLogStore").openCursor().onsuccess=function(e){const n=e.target.result;if(n){const e=new Router,i=e.url.searchParams;let r,s,o,a,c,l;switch(e.url.pathname){case ROUTES.daily:c=Number(i.get("timestamp")),r=new DateConverter(c),a=n.value.$defs["daily-logs"].find((e=>r.equals(Number(e.properties.date.time)))),l=a.properties.tasks.find((e=>e.description===t._itemEntry.description)),l.finished=t._itemEntry.finished;break;case ROUTES.weekly:c=Number(t.dataset.timestamp),r=new DateConverter(c),a=n.value.$defs["daily-logs"].find((e=>r.equals(Number(e.properties.date.time)))),l=a.properties.tasks.find((e=>e.description===t._itemEntry.description)),l.finished=t._itemEntry.finished;break;case ROUTES["collection-edit"]:s=i.get("name").replace(/\+/g," "),o=n.value.properties.collections.find((e=>e.name===s)),l=o.tasks.find((e=>e.description===t._itemEntry.description)),l.finished=t._itemEntry.finished}n.update(n.value)}}})),t.render()}))}setHoverListeners(){this.shadowRoot.getElementById("single-entry");const e=this.shadowRoot.querySelector("button");e.parentElement.addEventListener("mouseenter",(()=>{e.style.visibility="visible"})),e.parentElement.addEventListener("mouseleave",(()=>{e.style.visibility="hidden"}))}set itemEntry(e){this._itemEntry=e,this._itemEntry.editable=!0,"event"===e.logType&&(this._itemEntry.date=new DateConverter(Number(e.time))),this.render()}get page(){return this._page}set page(e){this._page=e}get itemEntry(){return this._itemEntry}getMilitaryTime(){return"event"!==this._itemEntry.logType?"":`${this._itemEntry.date.getHours()}:${this._itemEntry.date.getMinutes()}`}getFormattedTime(){if("event"!==this._itemEntry.logType)return"";const e=this._itemEntry.date.getHours(),t=this._itemEntry.date.getMinutes(),n=e%12;return`${0===n?12:n}:${t<10?`0${t}`:`${t}`}${e<12?"AM":"PM"}`}getFASymbolClass(){switch(this._itemEntry.logType){case"task":return this._itemEntry.finished?"task-finished-icon":"task-unfinished-icon";case"note":return"note-icon";case"event":return"event-icon";case"reflection":return"reflection-icon";default:return""}}}const PAGES={"daily-log":0,"weekly-view":1,"collection-edit":2};customElements.define("log-item",LogItem);export{LogItem,PAGES};